{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#benvinguts","title":"Benvinguts!!","text":"<p>Benivinguts a la web de Desenvolupament d'Interf\u00edcies.</p> <p>Curs 25/26. IES Jaume II \"El Just\" - Tavernes de la Valldigna</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#desenvolupament-dinterfecies","title":"Desenvolupament d'interf\u00e9cies","text":""},{"location":"about/#normativa","title":"Normativa","text":"<p>Estatal -&gt; RD: 450/2010</p> <p>Auton\u00f2mica -&gt; Curr\u00edculum CV: Ordre 58/2012</p>"},{"location":"about/#ies-jaume-ii-el-just-tavernes-de-la-valldigna","title":"IES Jaume II \"El Just\" - Tavernes de la Valldigna","text":""},{"location":"about/#curs-2024-2025","title":"Curs 2024-2025","text":"<p>Professor: Ferran Cunyat</p>"},{"location":"enlla%C3%A7os/","title":"Enlla\u00e7os","text":""},{"location":"enlla%C3%A7os/#benvinguts","title":"Benvinguts!!","text":""},{"location":"enlla%C3%A7os/#unitat-0-repas-de-javascript","title":"Unitat 0 - Rep\u00e0s de Javascript","text":"<p>https://javascript.info/</p> <p>https://eloquentjavascript.net/</p> <p>https://developer.mozilla.org/en-US/docs/Web/JavaScript</p>"},{"location":"info/guia_alumne_DI/","title":"guia alumne DI","text":""},{"location":"info/guia_alumne_DI/#1-presentacio-del-modul","title":"1. Presentaci\u00f3 del m\u00f2dul","text":"<p>El m\u00f2dul de Desenvolupament d'Interf\u00edcies pertany al 2on curs del CFGS de Desenvolupament d'Aplicacions Multiplataforma, i contribueix a aquirir diverses de les unitats de compet\u00e8ncia que s'hi estableixen al Cat\u00e0leg Nacional de Qualificacions Professionals.</p> <p>Segons el RD del t\u00edtol, la formaci\u00f3 en aquest m\u00f2dul contribueix a assolir els seg\u00fcents objectius del m\u00f2dul:</p> <ul> <li> <p>e) Seleccionar i emprar llenguatges, eines i llibreries, interpretant-ne les especificacions per desenvolupar aplicacions multiplataforma amb acc\u00e9s a bases de dades.</p> </li> <li> <p>f) Gestionar la informaci\u00f3 emmagatzemada, planificant i implementant sistemes de formularis i informes per desenvolupar aplicacions de gesti\u00f3.  </p> </li> <li> <p>g) Seleccionar i utilitzar eines espec\u00edfiques, llenguatges i llibreries, avaluant les possibilitats i seguint un manual d'estil, per manipular i integrar en aplicacions multiplataforma continguts gr\u00e0fics i components multim\u00e8dia.  </p> </li> <li> <p>h) Emprar eines de desenvolupament, llenguatges i components visuals, seguint les especificacions i verificant interactivitat i usabilitat, per desenvolupar interf\u00edcies gr\u00e0fics dusuari en aplicacions multiplataforma.  </p> </li> <li> <p>k) Valorar i emprar eines espec\u00edfiques, atenent l'estructura dels continguts, per crear ajudes generals i sensibles al context.</p> </li> <li> <p>l) Valorar i emprar eines espec\u00edfiques, atenent l'estructura dels continguts, per crear tutorials, manuals d'usuari i altres documents associats a una aplicaci\u00f3.  </p> </li> <li> <p>m) Seleccionar i emprar t\u00e8cniques i eines, avaluant la utilitat dels assistents d'instal\u00b7laci\u00f3 generats, per empaquetar aplicacions.  </p> </li> <li> <p>r) Verificar els components programari desenvolupats, analitzant les especificacions, per completar un pla de proves.  </p> </li> <li> <p>s) Establir procediments, verificant-ne la funcionalitat, per desplegar i distribuir aplicacions.  </p> </li> <li> <p>w) Identificar els canvis tecnol\u00f2gics, organitzatius, econ\u00f2mics i laborals en el seu activitat, analitzant-ne les implicacions en l'\u00e0mbit de treball, per mantenir l'esperit innovaci\u00f3.  </p> </li> </ul>"},{"location":"info/guia_alumne_DI/#2-objectius-resultats-daprenentatge","title":"2. Objectius. Resultats d'aprenentatge","text":"<p>D'acord amb la normativa, els resultats d'aprenentatge del m\u00f2dul de Desenvolupament d'Interf\u00edcies s\u00f3n:</p> <ol> <li>Genera interf\u00edcies gr\u00e0fiques d'usuari mitjan\u00e7ant editors visuals utilitzant les funcionalitats de l'editor i adaptant el codi generat.  </li> <li>Genera interf\u00edcies gr\u00e0fiques d'usuari basades en XML utilitzant eines espec\u00edfiques i adaptant el document XML generat.  </li> <li>Crea components visuals valorant i emprant eines espec\u00edfiques.  </li> <li>Dissenya interf\u00edcies gr\u00e0fiques identificant i aplicant criteris d'usabilitat.</li> <li>Crea informes avaluant i utilitzant eines gr\u00e0fiques.  </li> <li>Documenta aplicacions seleccionant i utilitzant eines espec\u00edfiques.  </li> <li>Prepara aplicacions per a la seva distribuci\u00f3 avaluant i utilitzant eines espec\u00edfiques.  </li> <li>Avalua el funcionament d'aplicacions dissenyant i executant proves.  </li> </ol>"},{"location":"info/guia_alumne_DI/#3-continguts-del-modul-unitats-didactiques","title":"3. Continguts del m\u00f2dul. Unitats did\u00e0ctiques","text":"<p>Els continguts del m\u00f2dul s'organitzen de la seguent forma:</p> <ul> <li>UD 1. Programaci\u00f3 amb Python. </li> <li>UD 2. Introducci\u00f3 a les interf\u00edcies gr\u00e0fiques.</li> <li>UD 3. Generaci\u00f3 d\u2019interf\u00edcies amb Flet</li> <li>UD 4. Generaci\u00f3 d\u2019interf\u00edcies amb PySide6</li> <li>UD 5. Generaci\u00f3 d\u2019interf\u00edcies mitjan\u00e7ant llenguatges de marques.</li> <li>UD 6. Elaboraci\u00f3 d\u2019informes.</li> <li>UD 7. Documentaci\u00f3 d'aplicaciones.</li> <li>UD 8. Proves, distribuci\u00f3 e implantaci\u00f3 d'aplicacions.</li> </ul>"},{"location":"info/guia_alumne_DI/#4-temporalitzacio-de-continguts","title":"4. Temporalitzaci\u00f3 de continguts","text":"<p>La temporalitzaci\u00f3 de continguts prevista ser\u00e0 la seg\u00fcemt:</p> Trimestre 1 Trimestre 2 Unitats 1-3 Unitats 4-7 <p></p>"},{"location":"info/guia_alumne_DI/#5-aspectes-metodologics","title":"5. Aspectes metodol\u00f2gics","text":""},{"location":"info/guia_alumne_DI/#51-material-didactic","title":"5.1. Material Did\u00e0ctic","text":"<p>El material did\u00e0ctic del m\u00f2dul pot ressumir-se en el seg\u00fcent:</p> <ul> <li>Apunts proporcionats pel professor en format web on s'inclouran exemples resolts del que s'ha d'estudiar.</li> <li>Textos d'ampliaci\u00f3 i enlla\u00e7os a articles i documentaci\u00f3 oficial relacionats amb cada unitat.</li> <li>Pr\u00e0ctiques i exercicis per resoldre per refor\u00e7ar el que s'ha exposat als apunts.</li> </ul> <p>Tot aquest material s'oferir\u00e0 a trav\u00e9s de la web i a trav\u00e9s l'aula virtual durant el desenvolupament de cada unitat.</p> <p>A m\u00e9s, dins l'aula virtual, disposarem d'un f\u00f2rum general per comentar aspectes globals del m\u00f2dul, i un f\u00f2rum per cada unitat did\u00e0ctica, per tal de resoldre dubtes i tractar aspectes relacionats amb la unitat.</p>"},{"location":"info/guia_alumne_DI/#52-programari","title":"5.2. Programari","text":"<p>El programari a utilitzar ser\u00e0 principalment lliure, i es donaran instruccions en cada unitat per a la seua desc\u00e0rrega i instal\u00b7laci\u00f3. A grans trets, el programari a utilitzar ser\u00e0:</p> <ul> <li>Sistema operatiu d'elecci\u00f3 pr\u00f2pia. Com a sistema operatiu de base a l'aula fem servir Linux Mint, tot i que per al modul, per\u00f2 l'alumne pot utilitzar qualsevol altre sistema operatiu, ja que tot el programari amb qu\u00e8 treballarem \u00e9s multiplataforma.</li> <li>Visual Studio Code com a editor de codi, que suporta diferents llenguatges, i \u00e9s bastant ampliable amb extensions. Tot i que ser\u00e0 l'editor de refer\u00e8ncia, es pot fer \u00fas de PyCharm, Eclipse, InteliJ o qualsevol altre editor/IDE.</li> <li>Python3, com a llenguatge de programaci\u00f3,</li> <li>PySide6 (Qt + Python3) com a framework per a aplicacions amb interf\u00edcie d'usuari multiplataforma per a aplicacions d'escriptori.</li> <li>Flet (Flutter + Python3), com a framework per a aplicacions multiplataforma amb interf\u00edcie d'usuari per a m\u00f2bil, web o escriptori.</li> <li>Llibreries python, altres llibreries de Python3 per a generar documentaci\u00f3, informes, proves o construcci\u00f3 dels binaris.</li> </ul>"},{"location":"info/guia_alumne_DI/#53-eines-web-i-collaboratives","title":"5.3. Eines web i col\u00b7laboratives","text":"<p>A banda del programari esmentat anteriorment, tamb\u00e9 s'utilitzaran el seg\u00fcent portals web i plataformes de treball col\u00b7laboratiu:</p> <ul> <li>Portal Aules: Com a aula virtual, i que articular\u00e0 el funcionament del m\u00f2dul. Ser\u00e0 aci on s'ubiquen els diferents recursos, f\u00f2rums, etc.</li> <li>Github: En alguns projectes en grup, ser\u00e0 de gran ajuda treballar amb sistemes de control de versions distribuits, com Github o Gitlab, de manera que puguen realitzar desenvolupaments de forma col\u00b7laborativa. Podeu optar per fer l'entrega de treballs a trav\u00e9s del vostre repositori Github.</li> </ul>"},{"location":"info/guia_alumne_DI/#54-metodologia","title":"5.4. Metodologia","text":"<p>Per a aquest curs, tant en modalitat presencial com semipresencial, anem a buscar una forma el m\u00e9s pr\u00e0ctica possible d'abordar les classes. </p> <p>Segons aquestes premisses, la metodolog\u00eda utilitzada al m\u00f2dul es regir\u00e0 per les seg\u00fcents pautes:</p> <ul> <li>En iniciar cada unitat did\u00e0tica es realitzar\u00e0 una presentaci\u00f3 inicial d'aquesta, dels conceptes b\u00e0sics, i de qu\u00e8 sereu capa\u00e7os de fer en finalitzar-la.</li> <li>Disposareu de material per a la seua lectura comprensiva i estudi, aix\u00ed com de documentaci\u00f3 addicional que es considere interessant,</li> <li>Disposareu d'exercicis i pr\u00e0ctiques que acompanyen la teor\u00eda de la unitat i que ens ajudaran a entendre els conceptes de la unitat, fonamentant-se en coneixements previs, facilitant aix\u00ed l'aprenentatge per descobriment, significatiu i deductiu.</li> <li>Les session a l'aula tindran un car\u00e0cter fonamentalment pr\u00e0ctic, i s'aprofitaran exemples i casos pr\u00e0ctics per exposar els principals conceptes.</li> <li>Es fomentar\u00e0 la realitzaci\u00f3 de projectes i treballs en equip, simulant el treball real en una empresa, on cadasc\u00fa tindr\u00e0 un paper ben definit dins el grup. (sols per a presencial, en el cas de semipresencial, el treball ser\u00e0 individual).</li> </ul>"},{"location":"info/guia_alumne_DI/#6-avaluacio","title":"6. Avaluaci\u00f3","text":"<p>L'avaluaci\u00f3 ser\u00e0 continuada, i consistir\u00e0 en el seguiment del treball que aneu realitzant. Cada unitat tindr\u00e0 una qualificaci\u00f3, fruit del treball d'activitats i pr\u00e0ctiques entregables.</p> <p>En finalitzar cada avaluaci\u00f3 podr\u00e0 haver una prova de validaci\u00f3 de coneixements, que caldr\u00e0 aprovar per considerar v\u00e0lida la qualificaci\u00f3 de l'avaluaci\u00f3 contunuada. La nota final ser\u00e0 la nota ponderada de la qualificaci\u00f3 del les diferents unitats, en funci\u00f3 del temps invertit en cadascuna, i el pes considerat per a cada tasca. Es perd el dret a l'avaluaci\u00f3 continuada en faltar a m\u00e9s d'un 15% de les classes. En este cas, la nota vindr\u00e0 donada al 100% per la nota de la prova corresponent.</p> <p>En cas de no superar l'avaluaci\u00f3, es tindr\u00e0 dret a una convocat\u00f2ria en per\u00edode extraordinari.</p> <p>Per a la correcci\u00f3 de les pr\u00e0ctiques i projectes s'utilitzar\u00e0 la r\u00fabrica disponible a la documentaci\u00f3.</p>"},{"location":"info/qualificacio/rubrica/","title":"Rubrica","text":""},{"location":"info/qualificacio/rubrica/#1-rubrica-per-a-avaluar-practiquesprojectes-en-disseny-dinterficies","title":"1. R\u00fabrica per a avaluar pr\u00e0ctiques/projectes, en Disseny D'interf\u00edcies","text":"<p>Criteris a evaluar:</p> <ul> <li>Resoluci\u00f3: utilitzaci\u00f3 dels algoritmes, les estructures de dades, les funcions, les estructures de control .. m\u00e9s adequats.</li> <li>Funcionament: la soluci\u00f3 proposada fa el que s'ha demanat.</li> <li>Interf\u00edcie:: interf\u00edcie clara i estructurada d'acord amb les especificacions.</li> <li>Altres aspectes: noms de variables, comentaris, regles d'estil de python, llibreries, documentaci\u00f3 per a posar en funcionament...</li> </ul> Molt b\u00e9 B\u00e9 Deficient Molt deficient Resoluci\u00f3 Utilitza les estructures m\u00e9s adequats per a resoldre l'exercici. Utilitza les estructures necessaris per a resoldre l'exercici, encara que no s\u00f3n les m\u00e9s adequades. Utilitza estructures inadequades per a resoldre l'exercici. Utilitza estructures que no resolen l'exercici. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Funcionament El funcionament de l'exercici \u00e9s correcte i est\u00e0 complet. El funcionament de l\u2019exercici est\u00e0 quasi complet o est\u00e0 complet per\u00f2 t\u00e9 fallades sense import\u00e0ncia. El funcionament de l'exercici t\u00e9 fallades importants. L'exercici no funciona. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Interf\u00edcie La interf\u00edcie utilitza els components m\u00e9s adequats, \u00e9s clar i estructurat, i a m\u00e9s \u00e9s amigable. La interf\u00edcie cont\u00e9 alguns components que no s\u00f3n els m\u00e9s adequats, per\u00f2 \u00e9s clar i estructurat. La interf\u00edcie cont\u00e9 alguns components que no s\u00f3n els m\u00e9s adequats, i a m\u00e9s, no \u00e9s clar ni estructurat. Al disseny gr\u00e0fic li falten alguns components necessaris i utilitza components que no s\u00f3n correctes. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Altres aspectes Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/","title":"Classes i her\u00e8ncia","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#classes-i-herencia","title":"Classes i her\u00e8ncia","text":"<p>A JavaScript, les classes i l'her\u00e8ncia s\u00f3n mecanismes que permeten organitzar i estructurar el codi de manera m\u00e9s neta i reutilitzable, imitant el comportament d'altres llenguatges de programaci\u00f3 orientats a objectes (OOP). Tot i que JavaScript no \u00e9s un llenguatge estrictament orientat a objectes, la introducci\u00f3 de les classes en ECMAScript 6 (ES6) va fer que la programaci\u00f3 orientada a objectes fos m\u00e9s accessible i intu\u00eftiva.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#1-classes-en-javascript","title":"1. Classes en JavaScript","text":"<p>Una classe \u00e9s una plantilla o un model per crear objectes. \u00c9s una forma de definir els atributs (propietats) i m\u00e8todes (funcions) d'un objecte.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#definir-una-classe","title":"Definir una classe:","text":"<p>A JavaScript, es poden definir les classes utilitzant la paraula clau <code>class</code>.</p> JavaScript<pre><code>class Persona {\n  // Constructor: inicialitza els valors de l'objecte\n  constructor(nom, edat) {\n    this.nom = nom; // propietat\n    this.edat = edat; // propietat\n  }\n\n  // M\u00e8tode de la classe\n  saludar() {\n    console.log(`Hola, em dic ${this.nom} i tinc ${this.edat} anys.`);\n  }\n}\n\n// Crear una inst\u00e0ncia de la classe\nconst persona1 = new Persona('Joan', 30);\npersona1.saludar(); // Output: Hola, em dic Joan i tinc 30 anys.\n</code></pre> <ul> <li> <p><code>constructor()</code>: El m\u00e8tode especial <code>constructor</code> es crida autom\u00e0ticament quan es crea una nova inst\u00e0ncia de la classe. S'hi defineixen els atributs o propietats inicials de l'objecte.</p> </li> <li> <p>M\u00e8todes: Els m\u00e8todes es defineixen a l'interior de la classe. Aquests s\u00f3n simplement funcions que actuen sobre les propietats de l'objecte.</p> </li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#2-instanciacio-dobjectes","title":"2. Instanciaci\u00f3 d'objectes","text":"<p>Per crear un objecte a partir d'una classe, es fa servir la paraula clau <code>new</code>:</p> JavaScript<pre><code>const persona2 = new Persona('Maria', 25);\npersona2.saludar(); // Output: Hola, em dic Maria i tinc 25 anys.\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#3-herencia-en-javascript","title":"3. Her\u00e8ncia en JavaScript","text":"<p>L'her\u00e8ncia permet crear una nova classe (subclasse) a partir d'una classe existent (superclasse). La subclasse heretar\u00e0 totes les propietats i m\u00e8todes de la superclasse i pot afegir-hi les seves pr\u00f2pies.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#sintaxi-dherencia","title":"Sintaxi d'her\u00e8ncia:","text":"<p>A JavaScript, per crear una subclasse, s'utilitza la paraula clau <code>extends</code>.</p> JavaScript<pre><code>class Treballador extends Persona {\n  constructor(nom, edat, feina) {\n    // Cridem el constructor de la superclasse (Persona)\n    super(nom, edat);  // super() crida al constructor de la classe pare\n    this.feina = feina; // nova propietat per a la subclasse\n  }\n\n  // M\u00e8tode de la subclasse\n  treballar() {\n    console.log(`${this.nom} est\u00e0 treballant com a ${this.feina}.`);\n  }\n}\n\nconst treballador1 = new Treballador('Pere', 40, 'enginyer');\ntreballador1.saludar(); // Output: Hola, em dic Pere i tinc 40 anys.\ntreballador1.traballar(); // Output: Pere est\u00e0 treballant com a enginyer.\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#explicacio-de-lherencia","title":"Explicaci\u00f3 de l'her\u00e8ncia:","text":"<ul> <li> <p><code>extends</code>: Permet a la subclasse heretar les propietats i m\u00e8todes de la classe pare.</p> </li> <li> <p><code>super()</code>: Es crida al constructor de la classe pare. \u00c9s necessari per inicialitzar les propietats de la classe pare abans de definir les pr\u00f2pies de la subclasse.</p> </li> <li> <p>Subclasse: Pot afegir m\u00e8todes propis a m\u00e9s dels m\u00e8todes heretats de la classe pare.</p> </li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#4-sobreescriptura-de-metodes","title":"4. Sobreescriptura de m\u00e8todes","text":"<p>A la subclasse, pots sobreescriure un m\u00e8tode de la classe pare. Aix\u00f2 significa que pots redefinir un m\u00e8tode que ja existeix a la classe pare per canviar el seu comportament.</p> JavaScript<pre><code>class Treballador extends Persona {\n  constructor(nom, edat, feina) {\n    super(nom, edat);\n    this.feina = feina;\n  }\n\n  // Sobreescriure el m\u00e8tode saludar de la classe Persona\n  saludar() {\n    console.log(`Hola, em dic ${this.nom} i s\u00f3c ${this.feina}.`);\n  }\n}\n\nconst treballador2 = new Treballador('Anna', 35, 'metgessa');\ntreballador2.saludar(); // Output: Hola, em dic Anna i s\u00f3c metgessa.\n</code></pre> <p>En aquest exemple, el m\u00e8tode <code>saludar</code> a la subclasse <code>Treballador</code> reempla\u00e7a el m\u00e8tode <code>saludar</code> de la classe <code>Persona</code>.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#5-propietats-i-metodes-estatics","title":"5. Propietats i m\u00e8todes est\u00e0tics","text":"<p>A m\u00e9s de les propietats i m\u00e8todes d'inst\u00e0ncia, tamb\u00e9 podem tenir propietats i m\u00e8todes est\u00e0tics. Aquests no estan associats a una inst\u00e0ncia de la classe, sin\u00f3 a la classe mateixa.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#propietats-i-metodes-estatics","title":"Propietats i m\u00e8todes est\u00e0tics:","text":"JavaScript<pre><code>class Matematica {\n  static PI = 3.1416;  // Propietat est\u00e0tica\n\n  static calcularAreaRadi( radi ) {\n    return Matematica.PI * radi * radi;  // M\u00e8tode est\u00e0tic\n  }\n}\n\nconsole.log(Matematica.PI);  // Output: 3.1416\nconsole.log(Matematica.calcularAreaRadi(5));  // Output: 78.54\n</code></pre> <ul> <li><code>static</code>: S'usa per declarar m\u00e8todes o propietats que pertanyen a la classe i no a les inst\u00e0ncies de la classe.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#6-getters-i-setters","title":"6. Getters i Setters","text":"<p>Els getters i setters permeten obtenir i modificar les propietats d'una inst\u00e0ncia de manera controlada.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#exemple-de-getters-i-setters","title":"Exemple de getters i setters:","text":"JavaScript<pre><code>class Persona {\n  constructor(nom, edat) {\n    this._nom = nom;\n    this._edat = edat;\n  }\n\n  // Getter per obtenir el nom\n  get nom() {\n    return this._nom;\n  }\n\n  // Setter per establir el nom\n  set nom(nouNom) {\n    this._nom = nouNom;\n  }\n\n  // Getter per obtenir l'edat\n  get edat() {\n    return this._edat;\n  }\n\n  // Setter per establir l'edat\n  set edat(novaEdat) {\n    if (novaEdat &gt;= 0) {\n      this._edat = novaEdat;\n    } else {\n      console.log('L\\'edat no pot ser negativa!');\n    }\n  }\n}\n\nconst persona3 = new Persona('Lluis', 28);\nconsole.log(persona3.nom); // Output: Lluis\npersona3.nom = 'Albert'; // Estableix un nou nom\nconsole.log(persona3.nom); // Output: Albert\n\npersona3.edat = -5; // Intentant establir una edat negativa\n</code></pre> <p>Els getters i setters et permeten controlar l'acc\u00e9s i la validaci\u00f3 de les propietats d'una classe.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/classes_herencia/#resum","title":"Resum","text":"<ul> <li>Classes: S\u00f3n plantilles per crear objectes amb propietats i m\u00e8todes. S'utilitza <code>class</code> per definir-les.</li> <li>Her\u00e8ncia: Permet crear subclasses que hereten propietats i m\u00e8todes de les classes pare. S'utilitza <code>extends</code> per crear una subclasse.</li> <li>Sobreescriptura de m\u00e8todes: Les subclasses poden redefinir els m\u00e8todes heretats.</li> <li>M\u00e8todes est\u00e0tics: Pertanyen a la classe en lloc de les inst\u00e0ncies.</li> <li>Getters i Setters: Permeten accedir i modificar propietats de manera controlada.</li> </ul> <p>L'\u00fas de classes i her\u00e8ncia facilita l'estructuraci\u00f3 de codi en JavaScript, fent-lo m\u00e9s modular, reutilitzable i net.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/","title":"Convenci\u00f3 de noms","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#convencio-de-noms","title":"Convenci\u00f3 de noms","text":"<p>Aqu\u00ed tens una descripci\u00f3 de les principals convencions de noms en JavaScript:</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#1-camel-case-cas-camell","title":"1. Camel Case (cas camell)","text":"<ul> <li>Variables i funcions s'escriuen amb camelCase, on la primera paraula comen\u00e7a en min\u00fascules i cada paraula subseq\u00fcent comen\u00e7a en maj\u00fascules.</li> <li>Exemple: <code>totalAmount</code>, <code>calculateSum</code>, <code>userName</code></li> </ul> <p>Regla: Comen\u00e7a amb una lletra min\u00fascula i utilitza maj\u00fascules per separar les paraules.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#2-pascal-case-tambe-conegut-com-uppercamelcase","title":"2. Pascal Case (tamb\u00e9 conegut com UpperCamelCase)","text":"<ul> <li>Classes i constructors s'escriuen amb PascalCase, que \u00e9s similar al camelCase, per\u00f2 amb la primera lletra de la primera paraula tamb\u00e9 en maj\u00fascules.</li> <li>Exemple: <code>Person</code>, <code>CarModel</code>, <code>DatabaseConnection</code></li> </ul> <p>Regla: Comen\u00e7a amb una lletra maj\u00fascula i utilitza maj\u00fascules per separar les paraules.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#3-snake-case","title":"3. Snake Case","text":"<ul> <li>No \u00e9s molt com\u00fa a JavaScript, per\u00f2 es fa servir en alguns altres llenguatges (com Python o bases de dades) o per noms de fitxers. En aquest cas, les paraules es separen amb guions baixos (_).</li> <li>Exemple: <code>user_name</code>, <code>total_amount</code>, <code>car_model</code></li> </ul> <p>Nota: A JavaScript, aquesta convenci\u00f3 \u00e9s menys utilitzada, per\u00f2 podries trobar-la en API o bases de dades.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#4-kebab-case","title":"4. Kebab Case","text":"<ul> <li>Similar al snake_case, per\u00f2 utilitzant un gui\u00f3 (<code>-</code>) per separar les paraules. Aquesta convenci\u00f3 s\u2019utilitza generalment en noms de fitxers, URLs o en entorns com CSS o en noms d'arxius.</li> <li>Exemple: <code>user-name</code>, <code>total-amount</code>, <code>car-model</code></li> </ul> <p>Nota: No s'usa per a noms de variables o funcions en codi JavaScript, per\u00f2 pot ser \u00fatil per noms de fitxers, carpetes o rutes.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#5-constantes-constants","title":"5. Constantes (constants)","text":"<ul> <li>Per a les constants que no canvien (\u00e9s a dir, valors que es mantenen igual durant tota l'execuci\u00f3), s'usa UPPERCASE amb guions baixos per separar les paraules.</li> <li>Exemple: <code>MAX_SIZE</code>, <code>PI_VALUE</code>, <code>DEFAULT_LANGUAGE</code></li> </ul> <p>Regla: Escriu les constants en maj\u00fascules i separa les paraules amb guions baixos.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#6-evitar-abreviacions-poc-clares","title":"6. Evitar abreviacions poc clares","text":"<ul> <li>\u00c9s una bona pr\u00e0ctica evitar les abreviacions que poden ser dif\u00edcils de comprendre per altres desenvolupadors. Per exemple, en lloc de <code>str</code> per a una cadena de text, utilitza <code>string</code>, i en lloc de <code>num</code> utilitza <code>number</code>.</li> <li>Exemple: <code>userName</code> en comptes de <code>usrNm</code>, <code>totalAmount</code> en comptes de <code>totAmt</code>.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#7-metodes-daccio","title":"7. M\u00e8todes d'Acci\u00f3","text":"<ul> <li>Els noms de les funcions o m\u00e8todes han de ser verbs perqu\u00e8 representen una acci\u00f3 que el codi realitza.</li> <li>Exemple: <code>getUserName()</code>, <code>calculateTotalAmount()</code>, <code>sendEmail()</code></li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#8-evitar-noms-generals-o-massa-generics","title":"8. Evitar noms generals o massa gen\u00e8rics","text":"<ul> <li>Intenta evitar noms com <code>data</code>, <code>info</code>, <code>item</code>, perqu\u00e8 s\u00f3n massa generals i no proporcionen molta informaci\u00f3 sobre qu\u00e8 fa la variable o funci\u00f3.</li> <li>Exemple millor: <code>userData</code>, <code>orderList</code>, <code>productItems</code>.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#9-evitar-noms-reservats-o-conflictes-amb-paraules-clau","title":"9. Evitar noms reservats o conflictes amb paraules clau","text":"<ul> <li>Evita utilitzar paraules clau del llenguatge (com <code>class</code>, <code>return</code>, <code>let</code>, <code>for</code>, etc.) com a noms de variables o funcions.</li> <li>Exemple: No utilitzis <code>let</code>, <code>const</code>, <code>return</code> com a noms de variables.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#10-variables-booleans","title":"10. Variables booleans","text":"<ul> <li>Per a variables booleans (que es poden establir com <code>true</code> o <code>false</code>), \u00e9s habitual utilitzar una forma interrogativa per al nom, generalment amb un prefix com <code>is</code>, <code>has</code>, <code>can</code> o <code>should</code>.</li> <li>Exemple: <code>isValid</code>, <code>hasPermission</code>, <code>canEdit</code>, <code>shouldUpdate</code></li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#11-evitar-lus-de-_-guio-baix-inicial","title":"11. Evitar l'\u00fas de _ (gui\u00f3 baix inicial)","text":"<ul> <li>A JavaScript, la convenci\u00f3 de utilitzar un gui\u00f3 baix inicial <code>_</code> per indicar que una variable \u00e9s privada \u00e9s habitual en alguns codi, per\u00f2 no \u00e9s una pr\u00e0ctica est\u00e0ndard del llenguatge. Aquest comportament sol ser com\u00fa quan es fa servir amb <code>class</code> i m\u00e8todes privats.</li> </ul> <p>Exemple: <code>_privateVar</code>, <code>_calculateTotal()</code></p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#12-noms-de-funcions-i-variables-en-plural-o-singular","title":"12. Noms de funcions i variables en plural o singular","text":"<ul> <li>Arrays o llistes: Si una variable cont\u00e9 diversos elements, \u00e9s habitual utilitzar noms en plural.</li> <li>Exemple: <code>users</code> (per a un array de persones), <code>items</code> (per a una llista d'objectes).</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/convencio_noms/#resum-de-les-convencions","title":"Resum de les convencions:","text":"<ul> <li>Camel Case: per a variables i funcions (<code>totalAmount</code>, <code>calculateSum</code>)</li> <li>Pascal Case: per a classes i constructors (<code>Person</code>, <code>CarModel</code>)</li> <li>Snake Case: per a noms de fitxers o en alguns entorns (per exemple, <code>user_name</code>)</li> <li>Kebab Case: per a noms d'arxius i URLs (per exemple, <code>user-name</code>)</li> <li>UPPERCASE: per a constants (<code>MAX_SIZE</code>, <code>PI_VALUE</code>)</li> </ul> <p>Seguir aquestes convencions ajuda a mantenir el codi net, organitzat i f\u00e0cil de llegir, especialment quan treballes en projectes col\u00b7laboratius amb altres desenvolupadors.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/","title":"Entrada eixida en node","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#entradaeixida-en-nodejs","title":"Entrada/eixida en node.js","text":"<p>El m\u00f2dul <code>readline</code> de Node.js \u00e9s una eina poderosa per manejar entrades i sortides de la l\u00ednia de comandes de manera interactiva. Aquest m\u00f2dul permet llegir l\u00ednies d'entrada del teclat (com a una aplicaci\u00f3 de consola) i gestionar l'output (sortida) a la terminal.</p> <p>Aqu\u00ed et mostrar\u00e9 com utilitzar <code>readline</code> per llegir i escriure informaci\u00f3 a la l\u00ednia de comandes amb exemples simples.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#1-configurar-readline-per-llegir-dades-de-lusuari","title":"1. Configurar <code>readline</code> per llegir dades de l'usuari","text":"<p>Per comen\u00e7ar, primer hem d'importar el m\u00f2dul <code>readline</code> i configurar un interface per la lectura i l'escriptura.</p> JavaScript<pre><code>const readline = require('readline');\n\n// Crear una interf\u00edcie per llegir de la consola (entrada) i escriure a la consola (sortida)\nconst rl = readline.createInterface({\n  input: process.stdin,  // Entrada des de la l\u00ednia de comandes\n  output: process.stdout  // Sortida a la l\u00ednia de comandes\n});\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#2-llegir-lentrada-de-lusuari","title":"2. Llegir l'entrada de l'usuari","text":"<p>Un cop tinguem l'interf\u00edcie configurada, podem utilitzar el m\u00e8tode <code>question</code> per fer preguntes a l'usuari i capturar les respostes.</p> JavaScript<pre><code>// Fer una pregunta a l'usuari\nrl.question('Com et dius? ', (nom) =&gt; {\n  console.log(`Hola, ${nom}!`);\n\n  // Tanquem la interf\u00edcie una vegada hem acabat\n  rl.close();\n});\n</code></pre> <p>Explicaci\u00f3:</p> <ul> <li><code>question</code> fa una pregunta i, quan l'usuari escriu una resposta, la resposta es passa com a par\u00e0metre a la funci\u00f3 de callback (en aquest cas, <code>nom</code>).</li> <li><code>rl.close()</code> tanca l'interf\u00edcie un cop hem acabat de llegir les dades.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#3-multiples-preguntes","title":"3. M\u00faltiples preguntes","text":"<p>Si vols fer diverses preguntes, pots encadenar-les usant diverses crides a <code>question</code>. Per\u00f2 tamb\u00e9 \u00e9s habitual utilitzar l'entrada en s\u00e8rie amb un callback o promesa per gestionar preguntes m\u00faltiples.</p> <p>Exemple de diverses preguntes amb <code>readline</code>:</p> JavaScript<pre><code>rl.question('Com et dius? ', (nom) =&gt; {\n  rl.question('Quants anys tens? ', (edat) =&gt; {\n    console.log(`Hola, ${nom}, tens ${edat} anys.`);\n\n    // Tanquem la interf\u00edcie un cop hem acabat\n    rl.close();\n  });\n});\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#4-usar-asyncawait-amb-promeses","title":"4. Usar <code>async/await</code> amb Promeses","text":"<p>Si vols que el codi sigui m\u00e9s net i f\u00e0cil de llegir, pots convertir les preguntes en promeses i utilitzar <code>async/await</code>.</p> <p>Aqu\u00ed tens un exemple d'\u00fas de <code>async/await</code> amb <code>readline</code>:</p> JavaScript<pre><code>const readline = require('readline');\n\n// Crear la interf\u00edcie readline\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// Funci\u00f3 per fer preguntes de manera as\u00edncrona amb promeses\nfunction preguntar(pregunta) {\n  return new Promise((resolve, reject) =&gt; {\n    rl.question(pregunta, (resposta) =&gt; {\n      resolve(resposta);\n    });\n  });\n}\n\n// Funci\u00f3 principal as\u00edncrona\nasync function obtenirInformacio() {\n  const nom = await preguntar('Com et dius? ');\n  const edat = await preguntar('Quants anys tens? ');\n\n  console.log(`Hola, ${nom}, tens ${edat} anys.`);\n\n  // Tanquem la interf\u00edcie\n  rl.close();\n}\n\nobtenirInformacio();\n</code></pre> <p>Explicaci\u00f3:</p> <ul> <li>La funci\u00f3 <code>preguntar</code> retorna una promesa que es resol amb la resposta de l'usuari.</li> <li>A la funci\u00f3 <code>obtenirInformacio</code>, utilitzem <code>await</code> per esperar que cada pregunta sigui contestada abans de passar a la seg\u00fcent.</li> <li><code>rl.close()</code> es crida un cop acabem de fer totes les preguntes.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#5-maneig-dentrada-i-sortida-per-linies","title":"5. Maneig d'entrada i sortida per l\u00ednies","text":"<p>A m\u00e9s de <code>question</code>, tamb\u00e9 podem llegir l\u00ednies de manera cont\u00ednua (per exemple, fins que l'usuari premi el teclat Ctrl + C o escrigui una l\u00ednia buida).</p> JavaScript<pre><code>const readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// Llegeix cada l\u00ednia d'entrada de l'usuari fins que el proc\u00e9s sigui tancat\nconsole.log('Escriu text (Ctrl+C per sortir):');\nrl.on('line', (input) =&gt; {\n  console.log(`Has escrit: ${input}`);\n});\n\n// Tanquem la interf\u00edcie quan es pressiona Ctrl+C o l'usuari tanca la terminal\nrl.on('close', () =&gt; {\n  console.log('Interf\u00edcie tancada. Fins aviat!');\n  process.exit(0);  // Finalitza el proc\u00e9s\n});\n</code></pre> <p>Explicaci\u00f3:</p> <ul> <li>Quan l'usuari escriu alguna cosa i prem <code>Enter</code>, l'esdeveniment <code>line</code> es dispara, i podem processar el que s'ha escrit.</li> <li>Quan l'usuari prem <code>Ctrl+C</code>, l'esdeveniment <code>close</code> es dispara i el proc\u00e9s finalitza.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/entrada_eixida/#resum","title":"Resum:","text":"<ul> <li>Entrada de dades: El m\u00f2dul <code>readline</code> s'utilitza per llegir dades de la l\u00ednia de comandes.</li> <li>Sortida de dades: Es pot utilitzar per mostrar missatges a la terminal.</li> <li>Gesti\u00f3 de preguntes: Amb <code>question</code> podem fer preguntes interactives.</li> <li>L\u00ednies cont\u00ednues: Usant l'esdeveniment <code>line</code>, podem llegir diverses l\u00ednies d'entrada.</li> <li>Manejo amb Promeses i async/await: Per facilitar la lectura del codi i la gesti\u00f3 de fluxos as\u00edncrons, podem utilitzar Promeses i <code>async/await</code>.</li> </ul> <p>Amb aix\u00f2, pots crear aplicacions de consola interactives i din\u00e0miques amb Node.js.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/","title":"Funcions sobre arrays","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#funcions-sobre-arrays","title":"Funcions sobre arrays","text":"<p>Les funcions <code>map()</code>, <code>filter()</code> i <code>reduce()</code> s\u00f3n m\u00e8todes molt utilitzats en JavaScript per treballar amb arrays de manera funcional. Aquestes funcions ajuden a transformar, filtrar i reduir dades en un array de manera concisa i expressiva, sense la necessitat d\u2019utilitzar bucles expl\u00edcits. S\u00f3n molt \u00fatils quan volem treballar amb dades de manera immutables (sense modificar l'array original).</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#1-map","title":"1. <code>map()</code>","text":"<p>La funci\u00f3 <code>map()</code> s'utilitza per transformar els elements d'un array. Aquesta funci\u00f3 aplica una funci\u00f3 a cada element de l'array i retorna un nou array amb els resultats.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#sintaxi","title":"Sintaxi:","text":"JavaScript<pre><code>array.map(callback(currentValue, index, array))\n</code></pre> <ul> <li><code>callback</code>: \u00c9s una funci\u00f3 que s'aplica a cada element de l'array.</li> <li><code>currentValue</code>: L'element actual que s'est\u00e0 processant.</li> <li><code>index</code> (opcional): L'\u00edndex de l'element actual.</li> <li><code>array</code> (opcional): L'array original.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#exemple","title":"Exemple:","text":"<p>Suposem que volem multiplicar cada n\u00famero d'un array per 2:</p> JavaScript<pre><code>const nombres = [1, 2, 3, 4, 5];\nconst multiplicats = nombres.map(num =&gt; num * 2);\n\nconsole.log(multiplicats);  // Output: [2, 4, 6, 8, 10]\n</code></pre> <p>En aquest exemple, <code>map()</code> aplica la funci\u00f3 <code>num =&gt; num * 2</code> a cada element de l'array <code>nombres</code>, retornant un nou array amb els valors multiplicats per 2.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#2-filter","title":"2. <code>filter()</code>","text":"<p>La funci\u00f3 <code>filter()</code> s'utilitza per filtrar elements d'un array segons una condici\u00f3. Aquesta funci\u00f3 retorna un nou array amb nom\u00e9s els elements que compleixen la condici\u00f3 especificada a la funci\u00f3 de callback.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#sintaxi_1","title":"Sintaxi:","text":"JavaScript<pre><code>array.filter(callback(currentValue, index, array))\n</code></pre> <ul> <li><code>callback</code>: Funci\u00f3 que defineix la condici\u00f3 per filtrar els elements.</li> <li><code>currentValue</code>: L'element actual que s'est\u00e0 processant.</li> <li><code>index</code> (opcional): L'\u00edndex de l'element actual.</li> <li><code>array</code> (opcional): L'array original.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#exemple_1","title":"Exemple:","text":"<p>Suposem que volem filtrar els nombres imparells d'un array:</p> JavaScript<pre><code>const nombres = [1, 2, 3, 4, 5];\nconst imparells = nombres.filter(num =&gt; num % 2 !== 0);\n\nconsole.log(imparells);  // Output: [1, 3, 5]\n</code></pre> <p>En aquest exemple, <code>filter()</code> filtra els elements que compleixen la condici\u00f3 <code>num % 2 !== 0</code> (\u00e9s a dir, els imparells).</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#3-reduce","title":"3. <code>reduce()</code>","text":"<p>La funci\u00f3 <code>reduce()</code> s'utilitza per reducir un array a un sol valor. La funci\u00f3 de callback que es passa a <code>reduce()</code> agafa dos valors a cada iteraci\u00f3: un acumulador (el valor que es va construint) i el valor actual de l'array.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#sintaxi_2","title":"Sintaxi:","text":"JavaScript<pre><code>array.reduce(callback(accumulator, currentValue, index, array), initialValue)\n</code></pre> <ul> <li><code>callback</code>: Funci\u00f3 que es crida per a cada element.</li> <li><code>accumulator</code>: L'acumulador (el valor que es va construint a mesura que recorrem l'array).</li> <li><code>currentValue</code>: El valor actual de l'element de l'array.</li> <li><code>initialValue</code> (opcional): Valor inicial per a l'acumulador (si no es passa, el primer element de l'array s'utilitza com a valor inicial).</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#exemple_2","title":"Exemple:","text":"<p>Suposem que volem sumar tots els elements d'un array:</p> JavaScript<pre><code>const nombres = [1, 2, 3, 4, 5];\nconst suma = nombres.reduce((acc, num) =&gt; acc + num, 0);\n\nconsole.log(suma);  // Output: 15\n</code></pre> <p>En aquest exemple, <code>reduce()</code> acumula els valors de l'array <code>nombres</code> sumant-los a l'acumulador <code>acc</code>. El valor inicial de l'acumulador \u00e9s <code>0</code>.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#exemple-amb-objectes","title":"Exemple amb objectes:","text":"<p>Imagina que tens un array de persones i vols obtenir l'edat total de totes les persones:</p> JavaScript<pre><code>const persones = [\n  { nom: 'Joan', edat: 30 },\n  { nom: 'Maria', edat: 25 },\n  { nom: 'Pere', edat: 35 }\n];\n\nconst edatTotal = persones.reduce((acc, persona) =&gt; acc + persona.edat, 0);\n\nconsole.log(edatTotal);  // Output: 90\n</code></pre> <p>Aqu\u00ed, <code>reduce()</code> acumula les edats de les persones en l'acumulador <code>acc</code>, retornant la suma total de les edats.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#resum-de-les-funcions","title":"Resum de les funcions:","text":"Funci\u00f3 Descripci\u00f3 Exemple <code>map()</code> Aplica una funci\u00f3 a cada element d'un array i retorna un nou array. <code>[1, 2, 3].map(num =&gt; num * 2)</code> \u2192 <code>[2, 4, 6]</code> <code>filter()</code> Filtra els elements d'un array segons una condici\u00f3 i retorna un array amb els elements que compleixen la condici\u00f3. <code>[1, 2, 3, 4].filter(num =&gt; num % 2 === 0)</code> \u2192 <code>[2, 4]</code> <code>reduce()</code> Redueix un array a un sol valor, acumulant els resultats a trav\u00e9s d'un proc\u00e9s iteratiu. <code>[1, 2, 3].reduce((acc, num) =&gt; acc + num, 0)</code> \u2192 <code>6</code>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/funcions_arrays/#casos-dus-comunes","title":"Casos d'\u00fas comunes:","text":"<ul> <li><code>map()</code>: Quan necessitem transformar cada element d'un array (per exemple, aplicar una operaci\u00f3 matem\u00e0tica o modificar l'estructura de cada element).</li> <li><code>filter()</code>: Quan necessitem filtrar elements d'un array basant-nos en alguna condici\u00f3 (per exemple, obtenir un subconjunt d'elements que compleixen una regla espec\u00edfica).</li> <li><code>reduce()</code>: Quan necessitem reduir un array a un \u00fanic valor (per exemple, la suma total d'una llista de n\u00fameros, la concatenaci\u00f3 de textos, o la creaci\u00f3 d'un objecte).</li> </ul> <p>Aquestes funcions permeten escriure codi m\u00e9s net i funcional, evitant l'\u00fas de bucles <code>for</code> expl\u00edcits i fent el codi m\u00e9s llegible.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/","title":"Import i export","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#importacio-exportacio","title":"Importaci\u00f3 exportaci\u00f3","text":"<p>A JavaScript, l'exportaci\u00f3 i la importaci\u00f3 de m\u00f2duls \u00e9s una pr\u00e0ctica essencial per organitzar el codi en diferents fitxers i permetre'n la reutilitzaci\u00f3. Aix\u00f2 ajuda a mantenir el codi modular, llegible i f\u00e0cil de mantenir.</p> <p>JavaScript t\u00e9 diferents maneres d'exportar i importar m\u00f2duls. La m\u00e9s comuna \u00e9s a trav\u00e9s dels m\u00f2duls ES6 (<code>import</code>/<code>export</code>), que \u00e9s el m\u00e8tode est\u00e0ndard per treballar amb m\u00f2duls a JavaScript modern. A m\u00e9s, tamb\u00e9 existeix el sistema de m\u00f2duls de CommonJS, que \u00e9s el que s'utilitza principalment en Node.js.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#1-moduls-es6-importexport","title":"1. M\u00f2duls ES6 (<code>import</code>/<code>export</code>)","text":"<p>Els m\u00f2duls ES6 s\u00f3n la forma est\u00e0ndard d'exportar i importar m\u00f2duls a JavaScript. Aquest sistema \u00e9s compatible amb la majoria de navegadors moderns i es pot utilitzar tamb\u00e9 en Node.js amb l'extensi\u00f3 <code>.mjs</code> o habilitant el suport a m\u00f2duls a trav\u00e9s de la configuraci\u00f3 del <code>package.json</code>.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#exportar-des-dun-modul-fitxer-js","title":"Exportar des d'un m\u00f2dul (fitxer <code>.js</code>):","text":"<p>Hi ha dues maneres d'exportar entitats (variables, funcions, classes, etc.) d'un m\u00f2dul: exportaci\u00f3 an\u00f2nima i exportaci\u00f3 anomenada.</p> <p>Exportaci\u00f3 an\u00f2nima: Es fa servir per exportar nom\u00e9s una entitat per m\u00f2dul. Pots exportar una variable, funci\u00f3 o classe directament quan la defines.</p> JavaScript<pre><code>// fitxer 'math.js'\n\n// Exportaci\u00f3 d'una funci\u00f3\nexport function suma(a, b) {\n  return a + b;\n}\n\n// Exportaci\u00f3 de m\u00faltiples entitats\nconst pi = 3.1416;\nexport { pi };\n</code></pre> <p>Exportaci\u00f3 anomenada: Tamb\u00e9 es poden exportar m\u00faltiples entitats d'un mateix m\u00f2dul.</p> JavaScript<pre><code>// fitxer 'math.js'\n\nconst pi = 3.1416;\nconst suma = (a, b) =&gt; a + b;\n\nexport { pi, suma };\n</code></pre> <p>Tamb\u00e9 pots fer una exportaci\u00f3 anomenada m\u00e9s compacta en el mateix moment de la declaraci\u00f3:</p> JavaScript<pre><code>// fitxer 'math.js'\nexport const pi = 3.1416;\nexport const suma = (a, b) =&gt; a + b;\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#importar-un-modul-fitxer-js","title":"Importar un m\u00f2dul (fitxer <code>.js</code>):","text":"<p>Per importar els m\u00f2duls en un altre fitxer, utilitzem <code>import</code> per a les exportacions anomenades i <code>import</code> tamb\u00e9 per a l'exportaci\u00f3 per defecte.</p> <p>Importaci\u00f3 d'exportacions anomenades:</p> JavaScript<pre><code>// fitxer 'app.js'\n\nimport { suma, pi } from './math.js';\n\nconsole.log(suma(2, 3));  // Output: 5\nconsole.log(pi);  // Output: 3.1416\n</code></pre> <p>Importaci\u00f3 d'exportaci\u00f3 per defecte:</p> <p>Si nom\u00e9s s'exporta una entitat (per exemple, una funci\u00f3 o una classe), es pot utilitzar l'exportaci\u00f3 per defecte.</p> JavaScript<pre><code>// fitxer 'math.js'\nexport default function suma(a, b) {\n  return a + b;\n}\n\n// fitxer 'app.js'\nimport suma from './math.js';\n\nconsole.log(suma(2, 3));  // Output: 5\n</code></pre> <p>Importar tot el m\u00f2dul: Si vols importar tot el contingut del m\u00f2dul i utilitzar-lo sota un \u00fanic nom, pots fer-ho aix\u00ed:</p> JavaScript<pre><code>// fitxer 'app.js'\nimport * as math from './math.js';\n\nconsole.log(math.suma(2, 3));  // Output: 5\nconsole.log(math.pi);  // Output: 3.1416\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#2-moduls-commonjs-nodejs","title":"2. M\u00f2duls CommonJS (Node.js)","text":"<p>A Node.js, el sistema de m\u00f2duls m\u00e9s antic utilitza CommonJS. En aquest sistema, les entitats es poden exportar amb <code>module.exports</code> i importar amb <code>require()</code>.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#exportacio-amb-commonjs","title":"Exportaci\u00f3 amb CommonJS:","text":"JavaScript<pre><code>// fitxer 'math.js'\n\n// Exportaci\u00f3 de funci\u00f3 amb module.exports\nmodule.exports.suma = function(a, b) {\n  return a + b;\n};\n\n// O b\u00e9, exportar tot a trav\u00e9s de module.exports\nmodule.exports = {\n  pi: 3.1416,\n  suma: function(a, b) {\n    return a + b;\n  }\n};\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#importacio-amb-commonjs","title":"Importaci\u00f3 amb CommonJS:","text":"JavaScript<pre><code>// fitxer 'app.js'\n\nconst math = require('./math.js');\n\nconsole.log(math.suma(2, 3));  // Output: 5\nconsole.log(math.pi);  // Output: 3.1416\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#3-com-utilitzar-importexport-a-nodejs","title":"3. Com utilitzar <code>import</code>/<code>export</code> a Node.js?","text":"<p>Si utilitzes Node.js, de forma predeterminada, es fa servir CommonJS. No obstant aix\u00f2, a partir de Node.js 14 i amb l'\u00fas de l'extensi\u00f3 <code>.mjs</code> o habilitant <code>\"type\": \"module\"</code> al fitxer <code>package.json</code>, pots utilitzar m\u00f2duls ES6.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#exemple-de-configuracio-per-a-nodejs-moduls-es6","title":"Exemple de configuraci\u00f3 per a Node.js (m\u00f2duls ES6):","text":"<ol> <li>Afegeix <code>\"type\": \"module\"</code> al teu fitxer <code>package.json</code>:</li> </ol> JSON<pre><code>{\n  \"type\": \"module\"\n}\n</code></pre> <ol> <li>Despr\u00e9s, pots utilitzar <code>import</code> i <code>export</code> a Node.js:</li> </ol> JavaScript<pre><code>// fitxer 'math.mjs'\nexport function suma(a, b) {\n  return a + b;\n}\n\n// fitxer 'app.mjs'\nimport { suma } from './math.mjs';\n\nconsole.log(suma(2, 3));  // Output: 5\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#4-diferencies-entre-importexport-i-requiremoduleexports","title":"4. Difer\u00e8ncies entre <code>import/export</code> i <code>require/module.exports</code>","text":"<ul> <li>Sintaxi: <code>import/export</code> \u00e9s la sintaxi est\u00e0ndard per a JavaScript modern, mentre que <code>require/module.exports</code> \u00e9s la sintaxi utilitzada per CommonJS, el sistema original de m\u00f2duls de Node.js.</li> <li>As\u00edncrones: <code>require()</code> es carrega de manera sincr\u00f2nica, mentre que <code>import</code> es fa de manera as\u00edncrona (pot ser important quan es treballa amb aplicacions web).</li> <li>Compatibilitat: <code>import/export</code> \u00e9s compatible amb els navegadors moderns i la majoria d'entorns que implementen JavaScript, mentre que <code>require()</code> \u00e9s espec\u00edfic de Node.js.</li> </ul>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#5-exportacio-i-importacio-per-defecte","title":"5. Exportaci\u00f3 i importaci\u00f3 per defecte","text":"<p>Quan utilitzes exportaci\u00f3 per defecte, nom\u00e9s es pot exportar una sola entitat, i pots importar-la sense utilitzar claus.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#exemple-dexportacio-per-defecte-i-importacio","title":"Exemple d'exportaci\u00f3 per defecte i importaci\u00f3:","text":"<p>Exportaci\u00f3 per defecte:</p> JavaScript<pre><code>// fitxer 'math.js'\nexport default function suma(a, b) {\n  return a + b;\n}\n</code></pre> <p>Importaci\u00f3 per defecte:</p> JavaScript<pre><code>// fitxer 'app.js'\nimport suma from './math.js';\n\nconsole.log(suma(2, 3));  // Output: 5\n</code></pre>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Pildores/import_export/#resum","title":"Resum:","text":"<ol> <li>ES6 (<code>import/export</code>): Utilitzat per a m\u00f2duls moderns a JavaScript. Utilitza <code>export</code> per exportar i <code>import</code> per importar m\u00f2duls.</li> <li>CommonJS (<code>require/module.exports</code>): Utilitzat principalment a Node.js. <code>module.exports</code> s'utilitza per exportar, i <code>require()</code> per importar.</li> <li>Node.js i m\u00f2duls ES6: A partir de Node.js 14, pots utilitzar m\u00f2duls ES6 si afegeixes <code>\"type\": \"module\"</code> al fitxer <code>package.json</code> o utilitzes l'extensi\u00f3 <code>.mjs</code>.</li> <li>Exportacions per defecte: S'exporta una sola entitat per m\u00f2dul i s'importa sense claus.</li> </ol> <p>Les convencions d'exportaci\u00f3 i importaci\u00f3 permeten estructurar el teu codi en m\u00f2duls reutilitzables, millorant la llegibilitat i la mantenibilitat del projecte.</p>"},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Tasques/BDD/","title":"BDD","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Tasques/BDD/#bbdd-per-a-la-gestio-de-la-biblioteca","title":"BBDD per a la gesti\u00f3 de la biblioteca","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Tasques/ExerciciPOO/","title":"Rep\u00e0s de POO amb JS","text":""},{"location":"unitats/U0%20-%20Rep%C3%A0s%20de%20JS/Tasques/ExerciciPOO/#exercici-gestio-duna-biblioteca","title":"Exercici: Gesti\u00f3 d'una Biblioteca","text":"<p>Crea una aplicaci\u00f3 de l\u00ednia de comandes de gesti\u00f3 de biblioteca amb Javascript que utilitze els conceptes de POO. La biblioteca ha de ser capa\u00e7 de gestionar material (llibres, revistes i pel\u00b7l\u00edcules), socis i administradors de pr\u00e9stecs.</p> <p>Cada llibre ha de tindre:</p> <ul> <li>un t\u00edtol</li> <li>un autor</li> <li>un n\u00famero d'exemplars disponibles</li> </ul> <p>Cada revista ha de tindre:</p> <ul> <li>un t\u00edtol</li> <li>un data de publicaci\u00f3</li> <li>un n\u00famero d'exemplars disponibles</li> </ul> <p>Cada pel\u00b7l\u00edcula ha de tindre:</p> <ul> <li>un t\u00edtol</li> <li>un director</li> <li>un g\u00e8nere</li> <li>un n\u00famero d'exemplars disponibles</li> </ul> <p>Cada soci ha de tindre:</p> <ul> <li>un nom</li> <li>un DNI</li> <li>una llista de llibres prestats.</li> </ul> <p>Cada administrador de pr\u00e9stecs ha de tindre:</p> <ul> <li>un nom</li> <li>un DNI</li> <li>un c\u00e0rrec (administrador o ajudant)</li> </ul> <p>L'aplicaci\u00f3 ha de permetre les seg\u00fcents funcions:</p> <ul> <li>Afegir un llibre a la biblioteca amb la informaci\u00f3 del t\u00edtol, autor i nombre d'exemplars disponibles.</li> <li>Afegir una pel\u00b7l\u00edcula a la biblioteca amb la informaci\u00f3 del t\u00edtol, director, g\u00e8nere i nombre d'exemplars disponibles.</li> <li>AAfegir una revista a la biblioteca amb la informaci\u00f3 del t\u00edtol, la data de publicaci\u00f3 i nombre d'exemplars disponibles.</li> <li>Afegir un soci amb el seu nom i DNI.</li> <li>Afegir un administrador amb el seu nom, DNI i c\u00e0rrec.</li> <li>Prestar un recurs a un soci. Cal verificar que el recurs estiga disponible i que el soci no haja superat el l\u00edmit de llibres prestats (per exemple, un m\u00e0xim de 3 llibres per soci).</li> <li>Retornar un llibre.</li> <li>Mostrar una llista de tots els recursos, amb la possibilitat de filtrar per tipus. En el cas de pel\u00b7l\u00edcules s'haur\u00e0 de filtrar tamb\u00e9 per g\u00e8nere. En el cas de revista per any de publicaci\u00f3.</li> <li>Mostrar una llista de tots els socis.</li> <li>Mostrar una llista de tots els administradors de pr\u00e9stecs.</li> <li>Mostrar una llista amb la informaci\u00f3 sobre quins recursos estan prestats a cada soci.</li> </ul> <p>Definix una classe per a cada objecte i utilitzar correctament els conceptes de programaci\u00f3 orientada a objectes com l'her\u00e8ncia, encapsulaci\u00f3 i m\u00e8todes per gestionar les operacions anteriorment mencionades.</p> <p>Crea tamb\u00e9 una classe principal o un programa de prova per interactuar amb la biblioteca.</p> <p>Aquest exercici t'ajudar\u00e0 a practicar els conceptes de programaci\u00f3 orientada a objectes, com la creaci\u00f3 de classes, la gesti\u00f3 d'objectes i la interacci\u00f3 entre ells.</p> <p>Descarrega ac\u00ed la SOLUCI\u00d3.</p>"}]}